// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StarwarsGameClient is the client API for StarwarsGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarwarsGameClient interface {
	GetCantSoldadosBroker(ctx context.Context, in *GetBrokerRequest, opts ...grpc.CallOption) (*GetBrokerReply, error)
	GetCantSoldadosServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerReply, error)
	MergeLeia(ctx context.Context, in *MergeLeiaRequest, opts ...grpc.CallOption) (*MergeLeiaReply, error)
}

type starwarsGameClient struct {
	cc grpc.ClientConnInterface
}

func NewStarwarsGameClient(cc grpc.ClientConnInterface) StarwarsGameClient {
	return &starwarsGameClient{cc}
}

func (c *starwarsGameClient) GetCantSoldadosBroker(ctx context.Context, in *GetBrokerRequest, opts ...grpc.CallOption) (*GetBrokerReply, error) {
	out := new(GetBrokerReply)
	err := c.cc.Invoke(ctx, "/proto.StarwarsGame/GetCantSoldadosBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starwarsGameClient) GetCantSoldadosServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerReply, error) {
	out := new(GetServerReply)
	err := c.cc.Invoke(ctx, "/proto.StarwarsGame/GetCantSoldadosServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starwarsGameClient) MergeLeia(ctx context.Context, in *MergeLeiaRequest, opts ...grpc.CallOption) (*MergeLeiaReply, error) {
	out := new(MergeLeiaReply)
	err := c.cc.Invoke(ctx, "/proto.StarwarsGame/MergeLeia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarwarsGameServer is the server API for StarwarsGame service.
// All implementations must embed UnimplementedStarwarsGameServer
// for forward compatibility
type StarwarsGameServer interface {
	GetCantSoldadosBroker(context.Context, *GetBrokerRequest) (*GetBrokerReply, error)
	GetCantSoldadosServer(context.Context, *GetServerRequest) (*GetServerReply, error)
	MergeLeia(context.Context, *MergeLeiaRequest) (*MergeLeiaReply, error)
	mustEmbedUnimplementedStarwarsGameServer()
}

// UnimplementedStarwarsGameServer must be embedded to have forward compatible implementations.
type UnimplementedStarwarsGameServer struct {
}

func (UnimplementedStarwarsGameServer) GetCantSoldadosBroker(context.Context, *GetBrokerRequest) (*GetBrokerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCantSoldadosBroker not implemented")
}
func (UnimplementedStarwarsGameServer) GetCantSoldadosServer(context.Context, *GetServerRequest) (*GetServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCantSoldadosServer not implemented")
}
func (UnimplementedStarwarsGameServer) MergeLeia(context.Context, *MergeLeiaRequest) (*MergeLeiaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeLeia not implemented")
}
func (UnimplementedStarwarsGameServer) mustEmbedUnimplementedStarwarsGameServer() {}

// UnsafeStarwarsGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarwarsGameServer will
// result in compilation errors.
type UnsafeStarwarsGameServer interface {
	mustEmbedUnimplementedStarwarsGameServer()
}

func RegisterStarwarsGameServer(s grpc.ServiceRegistrar, srv StarwarsGameServer) {
	s.RegisterService(&StarwarsGame_ServiceDesc, srv)
}

func _StarwarsGame_GetCantSoldadosBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsGameServer).GetCantSoldadosBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StarwarsGame/GetCantSoldadosBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsGameServer).GetCantSoldadosBroker(ctx, req.(*GetBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarwarsGame_GetCantSoldadosServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsGameServer).GetCantSoldadosServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StarwarsGame/GetCantSoldadosServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsGameServer).GetCantSoldadosServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarwarsGame_MergeLeia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeLeiaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarwarsGameServer).MergeLeia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StarwarsGame/MergeLeia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarwarsGameServer).MergeLeia(ctx, req.(*MergeLeiaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StarwarsGame_ServiceDesc is the grpc.ServiceDesc for StarwarsGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StarwarsGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StarwarsGame",
	HandlerType: (*StarwarsGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCantSoldadosBroker",
			Handler:    _StarwarsGame_GetCantSoldadosBroker_Handler,
		},
		{
			MethodName: "GetCantSoldadosServer",
			Handler:    _StarwarsGame_GetCantSoldadosServer_Handler,
		},
		{
			MethodName: "MergeLeia",
			Handler:    _StarwarsGame_MergeLeia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Starwars.proto",
}
