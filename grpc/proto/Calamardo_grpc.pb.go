// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalamardoGameClient is the client API for CalamardoGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalamardoGameClient interface {
	// Funciones de Lider
	JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error)
	StartGame(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	JuegoMsg(ctx context.Context, in *JuegoRequest, opts ...grpc.CallOption) (*JuegoReply, error)
	Muerte(ctx context.Context, in *MuerteRequest, opts ...grpc.CallOption) (*MuerteReply, error)
	// Funciones de NameNode
	InsertPlays(ctx context.Context, in *InsertPlaysRequest, opts ...grpc.CallOption) (*InsertPlaysReply, error)
	ReturnPlays(ctx context.Context, in *ReturnPlaysRequest, opts ...grpc.CallOption) (*ReturnPlaysReply, error)
	// Funciones de DataNode
	SavePlays(ctx context.Context, in *SavePlaysRequest, opts ...grpc.CallOption) (*SavePlaysReply, error)
	SendPlays(ctx context.Context, in *SendPlaysRequest, opts ...grpc.CallOption) (*SendPlaysReply, error)
}

type calamardoGameClient struct {
	cc grpc.ClientConnInterface
}

func NewCalamardoGameClient(cc grpc.ClientConnInterface) CalamardoGameClient {
	return &calamardoGameClient{cc}
}

func (c *calamardoGameClient) JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calamardoGameClient) StartGame(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calamardoGameClient) JuegoMsg(ctx context.Context, in *JuegoRequest, opts ...grpc.CallOption) (*JuegoReply, error) {
	out := new(JuegoReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/JuegoMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calamardoGameClient) Muerte(ctx context.Context, in *MuerteRequest, opts ...grpc.CallOption) (*MuerteReply, error) {
	out := new(MuerteReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/Muerte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calamardoGameClient) InsertPlays(ctx context.Context, in *InsertPlaysRequest, opts ...grpc.CallOption) (*InsertPlaysReply, error) {
	out := new(InsertPlaysReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/InsertPlays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calamardoGameClient) ReturnPlays(ctx context.Context, in *ReturnPlaysRequest, opts ...grpc.CallOption) (*ReturnPlaysReply, error) {
	out := new(ReturnPlaysReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/ReturnPlays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calamardoGameClient) SavePlays(ctx context.Context, in *SavePlaysRequest, opts ...grpc.CallOption) (*SavePlaysReply, error) {
	out := new(SavePlaysReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/SavePlays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calamardoGameClient) SendPlays(ctx context.Context, in *SendPlaysRequest, opts ...grpc.CallOption) (*SendPlaysReply, error) {
	out := new(SendPlaysReply)
	err := c.cc.Invoke(ctx, "/proto.CalamardoGame/SendPlays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalamardoGameServer is the server API for CalamardoGame service.
// All implementations must embed UnimplementedCalamardoGameServer
// for forward compatibility
type CalamardoGameServer interface {
	// Funciones de Lider
	JoinGame(context.Context, *JoinRequest) (*JoinReply, error)
	StartGame(context.Context, *StartRequest) (*StartReply, error)
	JuegoMsg(context.Context, *JuegoRequest) (*JuegoReply, error)
	Muerte(context.Context, *MuerteRequest) (*MuerteReply, error)
	// Funciones de NameNode
	InsertPlays(context.Context, *InsertPlaysRequest) (*InsertPlaysReply, error)
	ReturnPlays(context.Context, *ReturnPlaysRequest) (*ReturnPlaysReply, error)
	// Funciones de DataNode
	SavePlays(context.Context, *SavePlaysRequest) (*SavePlaysReply, error)
	SendPlays(context.Context, *SendPlaysRequest) (*SendPlaysReply, error)
	mustEmbedUnimplementedCalamardoGameServer()
}

// UnimplementedCalamardoGameServer must be embedded to have forward compatible implementations.
type UnimplementedCalamardoGameServer struct {
}

func (UnimplementedCalamardoGameServer) JoinGame(context.Context, *JoinRequest) (*JoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedCalamardoGameServer) StartGame(context.Context, *StartRequest) (*StartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedCalamardoGameServer) JuegoMsg(context.Context, *JuegoRequest) (*JuegoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JuegoMsg not implemented")
}
func (UnimplementedCalamardoGameServer) Muerte(context.Context, *MuerteRequest) (*MuerteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Muerte not implemented")
}
func (UnimplementedCalamardoGameServer) InsertPlays(context.Context, *InsertPlaysRequest) (*InsertPlaysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertPlays not implemented")
}
func (UnimplementedCalamardoGameServer) ReturnPlays(context.Context, *ReturnPlaysRequest) (*ReturnPlaysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnPlays not implemented")
}
func (UnimplementedCalamardoGameServer) SavePlays(context.Context, *SavePlaysRequest) (*SavePlaysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePlays not implemented")
}
func (UnimplementedCalamardoGameServer) SendPlays(context.Context, *SendPlaysRequest) (*SendPlaysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlays not implemented")
}
func (UnimplementedCalamardoGameServer) mustEmbedUnimplementedCalamardoGameServer() {}

// UnsafeCalamardoGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalamardoGameServer will
// result in compilation errors.
type UnsafeCalamardoGameServer interface {
	mustEmbedUnimplementedCalamardoGameServer()
}

func RegisterCalamardoGameServer(s grpc.ServiceRegistrar, srv CalamardoGameServer) {
	s.RegisterService(&CalamardoGame_ServiceDesc, srv)
}

func _CalamardoGame_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).JoinGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalamardoGame_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).StartGame(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalamardoGame_JuegoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuegoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).JuegoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/JuegoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).JuegoMsg(ctx, req.(*JuegoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalamardoGame_Muerte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuerteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).Muerte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/Muerte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).Muerte(ctx, req.(*MuerteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalamardoGame_InsertPlays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertPlaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).InsertPlays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/InsertPlays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).InsertPlays(ctx, req.(*InsertPlaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalamardoGame_ReturnPlays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnPlaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).ReturnPlays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/ReturnPlays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).ReturnPlays(ctx, req.(*ReturnPlaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalamardoGame_SavePlays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePlaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).SavePlays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/SavePlays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).SavePlays(ctx, req.(*SavePlaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalamardoGame_SendPlays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPlaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalamardoGameServer).SendPlays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CalamardoGame/SendPlays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalamardoGameServer).SendPlays(ctx, req.(*SendPlaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalamardoGame_ServiceDesc is the grpc.ServiceDesc for CalamardoGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalamardoGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CalamardoGame",
	HandlerType: (*CalamardoGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _CalamardoGame_JoinGame_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _CalamardoGame_StartGame_Handler,
		},
		{
			MethodName: "JuegoMsg",
			Handler:    _CalamardoGame_JuegoMsg_Handler,
		},
		{
			MethodName: "Muerte",
			Handler:    _CalamardoGame_Muerte_Handler,
		},
		{
			MethodName: "InsertPlays",
			Handler:    _CalamardoGame_InsertPlays_Handler,
		},
		{
			MethodName: "ReturnPlays",
			Handler:    _CalamardoGame_ReturnPlays_Handler,
		},
		{
			MethodName: "SavePlays",
			Handler:    _CalamardoGame_SavePlays_Handler,
		},
		{
			MethodName: "SendPlays",
			Handler:    _CalamardoGame_SendPlays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Calamardo.proto",
}
